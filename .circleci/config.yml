version: 2.1

parameters:
  min-rust-version:
    type: string
    default: "1.61"

executors:
  rust-env:
    docker:
      - image: jerusdp/ci-rust:<<pipeline.parameters.min-rust-version>>

commands:
  cargo-build:
    parameters:
      rust-version:
        default: "stable"
        type: string
    steps:
      - run:
          name: Update Rust and check build <<parameters.rust-version>>
          command: |
            cargo +<<parameters.rust-version>> check --all-features

jobs:
  required-builds:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - cargo-build:
          rust-version: "stable"
      - cargo-build:
          rust-version: "<<pipeline.parameters.min-rust-version>>"

  optional-builds:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - cargo-build:
          rust-version: "nightly"
      - cargo-build:
          rust-version: "beta"

  basic-test:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - run:
          name: Check formatting for code
          command: |
            rustfmt --version
            cargo fmt --all -- --check
      - run:
          name: Check idiomatic code use with Clippy
          command: "cargo clippy --all --tests --all-features -- -D warnings"
      - run:
          name: Test crate with no features specified
          command: "cargo test"

  all-features-flag-test:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - run:
          name: Test all features of the crate
          command: "cargo test --all-features"

  feature-test:
    parameters:
      mockd-feature:
        type: string
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - run:
          name: Test <<parameters.mockd-feature>> features of the crate
          command: "cargo test --features <<parameters.mockd-feature>>"

  docs:
    executor: rust-env
    environment:
      RUSTDOCFLAGS: --cfg docsrs -Dwarnings
    steps:
      - checkout
      - run:
          name: Test generation of all of the documentation for the crate
          command: |
            cargo +nightly doc --lib --no-deps --all-features --document-private-items


  what-can-i-see:
    executor: rust-env
    steps:
      - checkout
      - run:
          name: What can I see?
          command: |
            echo $CIRCLE_PULL_REQUEST
            echo $CIRCLE_PULL_REQUESTS
            echo $CIRCLE_PR_NUMBER
            echo $CIRCLE_PR_URL
            echo $CIRCLE_COMPARE_URL
            echo $CIRCLE_BRANCH
            echo $CIRCLE_USERNAME
            echo $CIRCLE_PROJECT_REPONAME
            echo $CIRCLE_PROJECT_USERNAME 
            echo $CIRCLE_REPOSITORY_URL
            echo $CIRCLE_BUILD_URL
            echo $CIRCLE_BUILD_NUM
            echo $CIRCLE_SHA1
            echo $CIRCLE_TAG
            echo $CIRCLE_TOKEN
            echo $CIRCLE_WORKFLOW_ID
            echo $CIRCLE_WORKFLOW_JOB_ID
            echo $CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS
            echo $CIRCLE_WORKFLOW_UPSTREAM_JOB_ID
            echo $CIRCLE_WORKFLOW_UPSTREAM_JOB_NAME
            echo $CIRCLE_WORKFLOW_UPSTREAM_JOB_URL



  release-ready:
    executor: rust-env
    steps:
      - checkout
      - run:
          name: Check if ready to make a release
          command: |
            set -eo pipefail

            if [ "$(nextsv -q)" != "none" ]
            then
              exit 0
            else 
             exit 1
            fi

  make-release:
    executor: rust-env
    steps:
      - checkout
      - run:
          name: import GPG key
          context: Release
          command: |
            echo -e $GPGKEY \
              | base64 --decode --ignore-garbage \
              | gpg --batch --allow-secret-key-import --import 
            gpg --keyid-format  LONG --list-secret-keys
      - run:
          name: Configure git for user and signing
          context: Release
          command: |
            git config user.email "$USER_EMAIL"
            git config user.name "$USER_NAME"
            git config --global gpg.program gpg
            git config --global user.signingkey "$SIGNKEY"
      - run:
          name: Publish update
          command: |
            set -exo pipefail
            export NEXTSV_LEVEL=$(nextsv -q -c other require -f CHANGES.md -f CHANGELOG.md feature)
            if [ $NEXTSV_LEVEL != "none" ] ; then 
              cargo release changes
              cargo release -vvv --execute --no-confirm --sign-tag "$NEXTSV_LEVEL"
            else 
              echo "Not ready to release yet."
            fi

  # make-release:
  #   executor: rust-env
  #   steps:
  #     - add_ssh_keys:
  #         fingerprints:
  #           - $SSH_FINGERPRINT
  #     - checkout
  #     - run:
  #         name: Configure git for user and signing
  #         command: |
  #           git config --global user.email "$USER_EMAIL"
  #           git config --global user.name "$USER_NAME"
  #           git config --global gpg.format ssh
  #           git config --global user.signingKey "$SSH_PUB"
  #           git config --local --list
  #     - run:
  #         name: Publish update
  #         command: |
  #           cargo release -vv --registry spare --execute --no-confirm "$(nextsv -q -e feature -r 'CHANGES.md' -r 'CHANGELOG.md')"


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  validation:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - what-can-i-see
      - required-builds
      - basic-test
      - feature-test:
          matrix:
            parameters:
              mockd-feature:
                [
                  all,
                  address,
                  animal,
                  beer,
                  company,
                  contact,
                  currency,
                  datetime,
                  file,
                  generator,
                  hacker,
                  hipster,
                  image,
                  internet,
                  job,
                  language,
                  log-level,
                  name,
                  password,
                  payment,
                  person,
                  random-bool,
                  status-code,
                  unique,
                  user-agent,
                  vehicle,
                  words,
                ]
          requires:
            - basic-test
            - required-builds
            - docs
      - all-features-flag-test:
          requires:
            - feature-test
      - docs
      - optional-builds
  release:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["release check", << pipeline.schedule.name >>]
    jobs:
      - release-ready
      - make-release:
          requires:
            - release-ready
